"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _AffectiveType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _AffectiveTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AffectiveType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    Attention: _AffectiveType.ValueType  # 0
    Relax: _AffectiveType.ValueType  # 1
    Stress: _AffectiveType.ValueType  # 2
    Enjoyment: _AffectiveType.ValueType  # 3

class AffectiveType(_AffectiveType, metaclass=_AffectiveTypeEnumTypeWrapper): ...

Attention: AffectiveType.ValueType  # 0
Relax: AffectiveType.ValueType  # 1
Stress: AffectiveType.ValueType  # 2
Enjoyment: AffectiveType.ValueType  # 3
global___AffectiveType = AffectiveType

@typing.final
class AffectiveData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    type: global___AffectiveType.ValueType
    value: builtins.float
    def __init__(
        self,
        *,
        type: global___AffectiveType.ValueType = ...,
        value: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type", "value", b"value"]) -> None: ...

global___AffectiveData = AffectiveData
